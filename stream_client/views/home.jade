html
	head
		title= title
		script(src="https://code.jquery.com/jquery-2.1.1.min.js")
		script(src="./javascripts/RTCMultiConnection-v1.9.js")
		script(src="./javascripts/socket.io-1.0.6.js")
		link(href='stylesheets/style.css', rel='stylesheet')

	body
		h1= title
		div(id="videoStream")
		script.
			var sessionID = "#{sessionID}";
			var userID = "#{userID}";

			console.log("Begin RTC Connection")
			console.log(sessionID + " " + userID)

			var connection = new RTCMultiConnection(sessionID);
			connection.bandwidth = {};
			connection.openSignalingChannel = openSignalingChannel;

			var videoStream = document.getElementById('videoStream');

			connection.onstream = function (e) {
				videoStream.appendChild(e.mediaElement);

				/*$(e.mediaElement).on("click", function(e){
					var parentOffset = $(this).parent().offset(); 

					relX = e.pageX - parentOffset.left;
					relY = e.pageY - parentOffset.top;
					console.log(relX+" "+relY);
				});*/
			};

			var seshInfo = {
				userid: userID,
				sessionid: sessionID,
				session: {
					video: true,
					oneway: true
				}
			};

			if (userID && sessionID) {
				connection.join(seshInfo);
			}

			function openSignalingChannel(config) {

				config.channel = config.channel || this.channel;
				var websocket = new WebSocket('ws://brocast-signalingserver.herokuapp.com');

				websocket.onopen = function () {

					$("video").on("click", function(e){
						var parentOffset = $(this).parent().offset(); 

						var relX = e.pageX - parentOffset.left;
						var relY = e.pageY - parentOffset.top;
						console.log(relX+" "+relY);
						websocket.push(JSON.stringify({
							data: {x: relX, y: relY},
							channel: config.channel
						}))
					});

					websocket.push(JSON.stringify({
						open: true,
						channel: config.channel
					}));

					if (config.callback) config.callback(websocket);
				};

				websocket.onerror = function() {
					alert('Unable to connect to ws://brocast-signalingserver.herokuapp.com');
				};

				websocket.onmessage = function (event) {
					config.onmessage(JSON.parse(event.data));
				};

				websocket.push = websocket.send;

				websocket.send = function (data) {
					if (typeof relX !== "undefined" && typeof relY !== "undefined") {
						data.coordinates = {x: relX, y: relY};
					}
					
					console.log(JSON.stringify(data))
					websocket.push(JSON.stringify({
						data: data,
						channel: config.channel
					}));
				};
			}

		div(id="annotations")
